//
// Generated file, do not edit! Created by nedtool 4.6 from seed_onoff_client_message.msg.
//

#ifndef _SEED_ONOFF_CLIENT_MESSAGE_M_H_
#define _SEED_ONOFF_CLIENT_MESSAGE_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>seed_onoff_client_message.msg:2</tt> by nedtool.
 * <pre>
 * message OnOffMessage
 * {
 *     int connId;
 * }
 * </pre>
 */
class OnOffMessage : public ::cMessage
{
  protected:
    int connId_var;

  private:
    void copy(const OnOffMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OnOffMessage&);

  public:
    OnOffMessage(const char *name=NULL, int kind=0);
    OnOffMessage(const OnOffMessage& other);
    virtual ~OnOffMessage();
    OnOffMessage& operator=(const OnOffMessage& other);
    virtual OnOffMessage *dup() const {return new OnOffMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getConnId() const;
    virtual void setConnId(int connId);
};

inline void doPacking(cCommBuffer *b, OnOffMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OnOffMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>seed_onoff_client_message.msg:7</tt> by nedtool.
 * <pre>
 * message SendPacketMessage
 * {
 *     int connId;
 * }
 * </pre>
 */
class SendPacketMessage : public ::cMessage
{
  protected:
    int connId_var;

  private:
    void copy(const SendPacketMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SendPacketMessage&);

  public:
    SendPacketMessage(const char *name=NULL, int kind=0);
    SendPacketMessage(const SendPacketMessage& other);
    virtual ~SendPacketMessage();
    SendPacketMessage& operator=(const SendPacketMessage& other);
    virtual SendPacketMessage *dup() const {return new SendPacketMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getConnId() const;
    virtual void setConnId(int connId);
};

inline void doPacking(cCommBuffer *b, SendPacketMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, SendPacketMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef _SEED_ONOFF_CLIENT_MESSAGE_M_H_

